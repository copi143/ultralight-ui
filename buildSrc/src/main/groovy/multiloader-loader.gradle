import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'multiloader-common'
    id "org.jetbrains.kotlin.jvm"
}

configurations {
    commonJava {
        canBeResolved = true
    }
    commonKotlin {
        canBeResolved = true
    }
    commonResources {
        canBeResolved = true
    }
}

dependencies {
    compileOnly(project(':common')) {
        capabilities {
            requireCapability "$group:$modId"
        }
    }
    commonJava project(path: ':common', configuration: 'commonJava')
    commonKotlin project(path: ':common', configuration: 'commonKotlin')
    commonResources project(path: ':common', configuration: 'commonResources')
}

tasks.named('compileJava', JavaCompile) {
    dependsOn(configurations.commonJava)
    source(configurations.commonJava)
}

tasks.named('compileKotlin') {
    dependsOn(configurations.commonKotlin)
    dependsOn(configurations.commonJava)
    source(configurations.commonJava)
    source(configurations.commonKotlin)
}

processResources {
    dependsOn(configurations.commonResources)
    from(configurations.commonResources)
}

tasks.named('sourcesJar', Jar) {
    dependsOn(configurations.commonJava)
    from(configurations.commonJava)
    dependsOn(configurations.commonKotlin)
    from(configurations.commonKotlin)
    dependsOn(configurations.commonResources)
    from(configurations.commonResources)
}

// Use dokka to generate javadoc for both Java and Kotlin sources
// instead of using the builtin javadoc tools. This allows mixing
// Kotlin and Java
tasks.named("dokkaJavadoc", DokkaTask) {
    dependsOn(configurations.commonJava)
    dependsOn(configurations.commonKotlin)
    dokkaSourceSets.configureEach {
        sourceRoots.from(configurations.commonJava.singleFile, configurations.commonKotlin.singleFile)
    }
}